{
  "author": {
    "name": "Novation Mobile"
  },
  "name": "novation-mobile",
  "description": "A configured server for node",
  "version": "0.1.0",
  "repository": {
    "url": "https://github.com/chapinkapa/novation-mobile/",
    "type": "git"
  },
  "keywords": [
    "framework"
  ],
  "license": "MIT",
  "licenses": {
    "type": "MIT",
    "url": "https://github.com/chapinkapa/novation-mobile/blob/master/LICENSE"
  },
  "main": "./lib/server",
  "bugs": {
    "url": "https://github.com/hemphillcc/cagination/issues"
  },
  "dependencies": {
    "basic-auth-connect": "^1.0.0",
    "body-parser": "^1.2.2",
    "connect": "^3.0.0-rc.2",
    "connect-basic-auth": "^0.1.0",
    "connect-redis": "2.0.*",
    "cookie": "0.1.*",
    "cookie-parser": "1.1.*",
    "cookie-signature": "1.0.*",
    "errorhandler": "1.0.*",
    "express": "4.3.*",
    "express-session": "1.2.*",
    "indexof": "0.0.1",
    "jade": "1.3.*",
    "method-override": "^1.0.2",
    "mongodb": "1.4.*",
    "mongoose": "3.8.*",
    "novation-mobile": "*",
    "redis": "^0.10.3",
    "redis-logger": "*",
    "request": "2.36.*",
    "serve-favicon": "^2.0.0",
    "socket.io": "1.0.*",
    "socket.io-redis": "^0.1.2"
  },
  "readme": "Novation-Mobile\n=========\n\nNovation-Mobile is a \"framework\" for Node.js. It was build by [Novation Mobile] to create scaleable Node.js servers with an emphasis on quick, standard development.\n\n\nVersion\n----\n\n0.1.0\n\nHow to use\n----\nIn your web.js file, use the following code:\n```\nvar nm = require('novation-mobile');\nvar config = {\n  port: process.argv[2] || 4050,\n  useStaticServer: true,\n  favicon: 'favicon.ico',\n  envLocation: '_env.js',\n  preContent: 'routes.js',\n  apiLocation: 'api/',\n  mongooseSchemaLocation: '_schema.js',\n  appName: \"ExampleApp\",\n  server: \"Main\",\n  turnOffAwesomeLogs:true,\n  viewEngine:\"jade\",\n  viewDirectory:\"views\",\n  publicDirectory:\"public\"\n};\n\nnm.extra(__dirname).server(config);\n```\nEach option should be customized for your app. \n\n#### Config Options:\n1. **port:** What port to run server on. Defaults to process.env.PORT and then to 4050.\n1. **useStaticServer:** Wether to allow the server to act as a static server for a specified folder. Used with viewEngine, viewDirectory, and publicDirectory. Defaults to true.\n1. **viewEngine:** Which view engine to use. Example: jade, html, handlebars, etc.\n1. **publicDirectory:** Which directory to be used as your 'static folder.'\n1. **favicon:** Location of your favicon. Defaults to \"public\".\n1. **[envLocation](#environmental-variables)**: Location of your environmenta\n1. **[preContent](#routes)**: Location of your routes that run before api routes.\n1. **[postContent](#routes)**: Location of your routes that run after api routes.\n1. **[apiLocation](#standard-apis)**: Location of your api files/functions. Defaults to \"api\".\n1. **[mongooseSchemaLocation](#mongoose-schema)**: Location of your mongoose schema. Defaults to \"_schema.js\".\n1. **appName**: Name of your app.\n1. **server**: Name of the server that the current code is running on.\n1. **turnOffAwesomeLogs**: If you want to turn off our custom redis-logger.\n1. **servers**: An array of servers that is used by redis-logger and socket.io-online-users.\n1. **ssl**: An object of options to use ssl on your node server.\n1. **ssl.key:** Location of key file to use.\n1. **ssl.cert:** Location of the cert file to use.\n1. **ssl.port:** Port to have your node.js https server run on.\n1. **dontUseRedisTTL:** do not use a ttl for redis.\n1. **ttl:** Time in seconds until redis expires documents. Defaults to 3600.\n1. **onlineUsersConfig:** An object with configuration options to use socket.io-online-users.\n\nComponents\n----\n###Environmental Variables\n##### Location: _env.js\nAllows you to create a mongoose schema that can be used throughout your app. Configure your file to look like this:\n```\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nexports.User = mongoose.model('User', new Schema({\n  createdAt: Date,\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  },\n  firstName:String,\n  lastName:String,\n  fullName:String\n}));\n```\n###Routes \n##### Location: routes.js\nAllows you to create custom routes for your app.\n```\nexports.content = function(app, io) {\n  //you can use this page for additional, custom routes;\n  app.get(\"/\",function(req,res,next){\n    res.send(\"This is an example server\");\n  });\n};\n\n```\n###Standard APIs\n##### Location: api/\nAllows you to create APIs quickly and APIs that can be access by both socket.io and by RESTful APIs.\n\nFor example, if you have a file in api/test.js, and the contents are:\n```\nmodule.exports=function(data,fn,session,extras){\n  exports.run=function(){\n    var number = Math.random();\n    if(number<.5){\n      return fn(\"This is a standard error message.\");\n    } else {\n      return fn(null,{\n        data:\"This the standard way to send data back to the client.\"\n      });\n    }\n  };\n  return exports;\n};\n```\nThen you can either hit this route using http://localhost:4050/api/test/run or by using sockets on the client and running: \n```\nsocket.emit(\"api\",\"test\",\"run\",{data:\"customData\"},function(err,data){\n  if(err){\n    console.log(err);\n  } else {\n    console.log(data);\n  }\n});\n```\n###Mongoose Schema\n##### Location: schema.js\nAllows you to create a mongoose schema that can be used throughout your app. Configure your file to look like this:\n```\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nexports.User = mongoose.model('User', new Schema({\n  createdAt: Date,\n  updatedAt: {\n    type: Date,\n    default: Date.now\n  },\n  firstName:String,\n  lastName:String,\n  fullName:String\n}));\n```\n\nLicense\n----\n\nMIT\n\n[Novation Mobile]:http://novationmobile.com/#portfolio.html",
  "readmeFilename": "README.md",
  "gitHead": "2afcc40eba3fa958eb8ac7c3bd08751f32366870",
  "_id": "novation-mobile@0.1.0",
  "scripts": {},
  "_shasum": "a9b3d023a2a959e4ff6532b8955415a008f1af5a",
  "_from": "novation-mobile@*"
}
