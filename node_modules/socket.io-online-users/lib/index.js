module.exports=onlineUsers;

function onlineUsers(opts){
  if(!opts.appName || !opts.serverName || !opts.dataClient){
    throw "You must intialze this object with one object arguments with the following properties, io (your io object), appName (the name of your app), serverName (name of which server this code will be on), and dataClient, your redis.createClient() object to store your data on.";
  }
  if(!opts.servers){
    throw "You must include a list of servers to listen to."
  }
  var This=this;
  this.users={};
  this.sockets={};
  this.dataClient=opts.dataClient;
  this.io=opts.io;
  this.servers=opts.servers;
  this.appName=opts.appName;
  this.roomsToListenTo= opts.roomsToListenTo || ["onlineUsers"];
  this.timer=opts.timer || 1000;
  if(!opts.justListen){
    this.serverName=opts.serverName;
    if(this.serverName.indexOf(":")!=-1){
      this.serverType=this.serverName.split(":")[0];
    }
    this.key=getKey(this.appName,this.serverName);
    this.expireUser=(opts.expireUser || 60)*1000;//60 seconds
    //delete keys when first started;
    this.deleteClients();
    setInterval(function(){
      This.updateClients();
    },this.timer);
  }
  return this;
}
function getKey(appName,server){
  return appName+":"+server;
}
function getServerName(server){
  server=server.split(":");
  return server[0];
}
onlineUsers.prototype.getRelatedSockets= function(socketId,room){
  var userId=this.sockets[socketId];
  if(userId){
    var indexOfSocket=this.users[userId].indexOf(socketId);
    if(indexOfSocket!=-1){
      var sockets=this.users[userId];
      return {
        userId:userId,
        sockets:sockets,
        socketIndex:indexOfSocket
      }
    }
  } else {
    return {
      userId:null,
      sockets:[socketId],
      socketIndex:-1
    }
  }
};
onlineUsers.prototype.removeUserId=function(socketId){
  var obj=this.getRelatedSockets(socketId);
  delete this.sockets[socketId];
  if(typeof obj==="object" && obj.userId && this.users[obj.userId]){
    this.users[obj.userId].splice(obj.socketIndex,1);
  }
  return this;
};
onlineUsers.prototype.setUserId=function(userId,socketId){
  if(!this.users[userId]){
    this.users[userId]=[];
  }
  this.sockets[socketId]=userId;
  this.users[userId].push(socketId);
  return this;
};
onlineUsers.prototype.deleteClients=function(fn){
  if(!fn){
    fn=function(){};
  }
  this.dataClient.del(this.key,fn);
  return this;
};
onlineUsers.prototype.updateClients=function(fn){
  if(!fn){
    fn=function(){};
  }
  var This=this;
  var rooms=this.io.sockets.adapter.rooms;
  var key=this.key;
  var multi=this.dataClient.multi();
  multi.del(key);
  var redisRooms={};
  for(var i in rooms){
    if(this.roomsToListenTo.indexOf(i)!=-1){
      redisRooms[i]={};
      for(var socketId in rooms[i]){
        var obj=this.getRelatedSockets(socketId,i);
        if(obj && obj.sockets){
          redisRooms[i][obj.userId]={
            sockets:obj.sockets
          };
        }
      }
    }
  }
  redisRooms=This.addOldUsers(redisRooms);
  multi.set(key,JSON.stringify(redisRooms));
  multi.expire(key,this.timer/1000);
  multi.exec(function(err,data){
    if(err){
      return fn.apply(this,arguments);
    }
    fn.apply(this,arguments);
    This.getRooms(function(err,rooms){
      io.emit("updateRooms",rooms,This.serverType);
    });
  });
  return this;
};
onlineUsers.prototype.getRoomsUnformated=function(fn){
  if(!fn){
    fn=function(){};
  }
  var This=this;
  var rooms=this.io.sockets.adapter.rooms;
  var key=this.key;
  var multi=this.dataClient.multi();
  var keys=[];
  var servers=this.servers;
  for(var i in servers){
    var key=getKey(this.appName,servers[i]);
    keys.push(key);
    //multi.hgetall(key);
    multi.get(key);
  }
  var redisRooms={};
  for(var i in servers){
    var osName=servers[i].split(":")[1];
    redisRooms[getServerName(servers[i])]={};
    redisRooms[getServerName(servers[i])][osName]={};
  }
  multi.exec(function(err,serverList){
    if(err){
      return fn(err);
    }
    for(var i in serverList){
      var osName=servers[i].split(":")[1];
      redisRooms[getServerName(servers[i])][osName]=serverList[i];
    }
    return fn(null,redisRooms);
  });
  return this;
};
onlineUsers.prototype.getRooms=function(fn){
  if(!fn){
    fn=function(){};
  }
  var This=this;
  var rooms=this.io.sockets.adapter.rooms;
  var key=this.key;
  var multi=this.dataClient.multi();
  var keys=[];
  var servers=this.servers;
  for(var i in servers){
    var key=getKey(this.appName,servers[i]);
    keys.push(key);
    //multi.hgetall(key);
    multi.get(key);
  }
  var redisRooms={};
  for(var i in servers){
    redisRooms[getServerName(servers[i])]={};
  }
  multi.exec(function(err,serverList){
    if(err){
      return fn(err);
    }
    for(var i in serverList){
      var server=getServerName(servers[i]);
      serverList[i]=JSON.parse(serverList[i]);
      for(var room in serverList[i]){
        if(!redisRooms[server][room]){
          redisRooms[server][room]={};
        }
        for(var userId in serverList[i][room]){
          var user=serverList[i][room][userId];
          if(user.sockets && user.sockets instanceof Array && user.sockets.length>0){
            delete user.inactiveDate;
          }
          serverList[i][room][userId]=user;
          redisRooms[server][room][userId]=serverList[i][room][userId];
        }
      }
    }
    return fn(null,redisRooms);
  });
  return this;
};
onlineUsers.prototype.addOldUsers=function(rooms){
  if(!this.roomHistory){
    this.roomHistory=rooms;
  }
  var roomHistory=this.roomHistory;
  for(var i in roomHistory){
    for(var userId in roomHistory[i]){
      if(!rooms[i]){
        rooms[i]={};
      }
      if(!rooms[i]){
        rooms[i]={};
      }
      if(!rooms[i][userId]){
        if(!roomHistory[i][userId].inactiveDate){
          roomHistory[i][userId].inactiveDate = new Date();
        }
        if(new Date() - roomHistory[i][userId].inactiveDate > this.expireUser){
          delete roomHistory[i][userId];
        } else {
          rooms[i][userId]=roomHistory[i][userId];
        }
      } else {
        if(!rooms[i][userId].startDate){
          rooms[i][userId].startDate=new Date();
        }
      }
    }
  }
  this.roomHistory=rooms;
  return rooms;
};
onlineUsers.prototype.getRoom=function(room,fn){
  if(!fn){
    fn=function(){};
  }
  this.getRooms(function(err,rooms){
    var roomsCopy=JSON.parse(JSON.stringify(rooms));
    if(err){
      return fn(err);
    }
    for(var i in rooms){
      roomsCopy[i]={};
      if(rooms[i][room]){
        roomsCopy[i][room]=rooms[i][room]
      }
    }
    return fn(null,roomsCopy);
  });
  return this;
};